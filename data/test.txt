// 在这里输入 Rust-like 代码
fn test1(mut a:i32) -> i32 {
  while (a > 0) {
    a = a - 1;
  }
  let b = 114514;
  return b;
}

 fn test2(mut a:i32) -> i32 {
 	if a>0 {
 		return a+1;
 	} else if a<0 {
 		return a-1;
 	} else {
 		return 0;
 	}
 }
 
fn program_6_1__1() {
	let a:i32=1;
	let b=2;
}

/*
fn program_6_1__2() {
	let c:i32=1;
	c=2;
}
*/

fn program_6_2__1() {
	let mut a:i32=1;
	let mut b:&mut i32=&mut a;
	let mut c:i32=*b;
}
fn program_6_2__2() {
	let a:i32=1;
	let b:& i32=&a;
	let c:i32=*b;
}

fn program_8_1__1() {
	let mut a:[i32;3];
	a=[1,2,3];
}

/*
fn program_8_1__2(mut a:i32) {
	let mut a:[i32;2];
	a=1;
}


fn program_8_1__3(mut a:i32) {
	let mut a:[i32;2];
	a=[1,2,3];
}

fn program_8_1__4() {
	let mut a:[[i32;1];1];
	a=[1];
}
*/

fn program_8_2__1(mut a:[i32;3]) {
	let mut b:i32=a[0];
	a[0]=1;
}

/*
fn program_8_2__2(mut a:i32) {
	let mut a=[1,2,3];
	let mut b=a[a];
}

fn program_8_2__3() {
	let mut a=[1,2,3];
	let mut b=a[3];
}

fn program_8_2__4() {
	let a:[i32;3]=[1,2,3];
	a[0]=4;
}
*/

fn main() {
  let mut a:i32 = 6;
  let mut b;
  let mut c = test1(a);
  let mut d:i32;
  d = 1+1*4 +5 /4;
  b = test2(d);
  program_6_1__1();
  program_6_2__1();
  program_6_2__2();
  program_8_1__1();
  let mut e:[i32;3];
  e=[1,2,3];
  program_8_2__1(e);
  
}